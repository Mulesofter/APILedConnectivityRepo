<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="api-led-connectivity-project-suite.xml" />
	<munit:test name="apiexperienceFlow-test" doc:id="ac14486c-1df3-4b40-98e9-ead64b6a0baa" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Flow Reference" doc:id="68bc5317-a141-452f-bb61-38b796bc62dd" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="432705d1-1987-4e17-9081-6b3dab1e8eaa" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://apiexperienceFlowtest\mock_payload.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://apiexperienceFlowtest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="29a56002-7baa-47a0-bcb1-c1a4a1e0f366" >
				<munit:payload value="#[readUrl('classpath://apiexperienceFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://apiexperienceFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to apiexperienceFlow" doc:id="cece9cfc-0448-457e-8012-3ced79448ba4" name="apiexperienceFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="961d111b-4be1-40f5-b8e8-fab96ecebdd7" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import apiexperienceFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="apiProcessFlow-test" doc:id="77ca447c-f96f-490c-a3a8-0db288a0233e" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Set Variable" doc:id="83108626-d806-4ee7-8cb0-467b1982e7e5" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="301334e0-8dc3-412c-8344-1b3f9a234682" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://apiProcessFlowtest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a4cbcf47-807f-49aa-9a84-190e1cedbf0c" >
				<munit:payload value="#[readUrl('classpath://apiProcessFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://apiProcessFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to apiProcessFlow" doc:id="b5fc98f2-57af-42c2-a701-150ca0cad262" name="apiProcessFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ec22b2cd-faa2-4b71-93cb-53b697ffa0ac" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import apiProcessFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="apiProcessFlow-test1" doc:id="4f348e49-8710-4efc-b867-595c40e14da7" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Set Variable" doc:id="5fea3553-72f2-416e-b87c-4619dbbe976c" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="301334e0-8dc3-412c-8344-1b3f9a234682" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://apiProcessFlowtest1\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="09858f45-92d7-4dbd-9cba-32516d674846" >
				<munit:payload value="#[readUrl('classpath://apiProcessFlowtest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://apiProcessFlowtest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to apiProcessFlow" doc:id="f2f1b6f2-ec18-4d58-bcb1-37ee51558568" name="apiProcessFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="864f1e3e-0d8d-477b-abdd-99dcc30e8a73" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import apiProcessFlowtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="cruise-subflow-test" doc:id="9e370189-1613-49ee-b96f-5b5b3af4d82d" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="30953c57-0424-49e1-b629-2e8d6eaabdb4" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="13f7d587-0202-4941-b0c1-e29d41a7dd7e" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://cruisesubflowtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://cruisesubflowtest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="8816d74c-7c5a-46e3-b589-199a553c50ce" >
				<munit:payload value="#[readUrl('classpath://cruisesubflowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://cruisesubflowtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://cruisesubflowtest\set-event_variable_.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to cruise-subflow" doc:id="88e2991c-cd54-401b-9273-11c10882f9ad" name="cruise-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d7b16995-455c-4b57-8531-5db40757686b" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import cruisesubflowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="trains-subflow-test" doc:id="a4b81e62-d724-47b6-97e7-04ce59327dbc" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select" doc:id="beca16ca-c64d-458d-8a54-5fa15016aabc" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="10709624-bd2c-4113-8c67-0213c8112d26" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://trainssubflowtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://trainssubflowtest\mock_variable_.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="719adce2-404b-4ff4-8434-604f3cfe7181" >
				<munit:payload value="#[readUrl('classpath://trainssubflowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://trainssubflowtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="inventoryType" value="#[output application/java --- readUrl('classpath://trainssubflowtest\set-event_variable_.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to trains-subflow" doc:id="8ca9b45b-d158-4c0f-a2cc-7d1c4270eeeb" name="trains-subflow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="741aec1c-10c1-44a1-9d01-17d432c7b42f" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import trainssubflowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
